openapi: 3.1.0

info:
  title: Dearly API
  summary: Dearly makes connecting with loved ones easy.
  description: |
    Dearly is a private family-sharing app that bridges generational gaps and makes staying connected easier and more meaningful. The platform allows families to share photos, voice memos, and other media in a secure, invite-only space. With two thoughtfully designed modes, Dearly caters to every generation: a streamlined, user-friendly interface for those less familiar with technology and a dynamic, feature-rich experience for younger users.
  version: 1.0.0

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
    ValidationError:
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            required:
              - path
              - message
            properties:
              path:
                type: string
              message:
                type: string
    User:
      type: object
      properties:
        name:
          type: string
          description: Display name of the user.
        username:
          type: string
          description: The username of the user.
        id:
          type: string
          format: uuid
          example: 5e91507e-5630-4efd-9fd4-799178870b10
          description: A unique identifier for the user.
        mode:
          type: string
          enum: ["BASIC", "ADVANCED", null]
          description: The mode for the user (e.g., "BASIC" or "ADVANCED"). Default to "BASIC" if no mode is provided.
        profilePhoto:
          type: string
          nullable: true
          description: A URL to the user's profile photo.
        notificationsEnabled:
          type: boolean
          description: True when user enables notification.
      required:
        - name
        - username
        - mode
    Group:
      type: object
      properties:
        name:
          type: string
          description: The name of the group.
        description:
          type: string
          description: A description of the group.
      required:
        - name
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 5e91507e-5630-4efd-9fd4-799178870b10
          description: A unique identifier for the post.
        groupId:
          type: string
          format: uuid
          example: 5e91507e-5630-4efd-9fd4-799178870b10
          description: A unique identifier for the group.
        userId:
          type: string
          format: uuid
          example: 5e91507e-5630-4efd-9fd4-799178870b10
          description: A unique identifier for the user who makes the post.
        createdAt:
          type: string
          format: date-time
          example: "2025-01-17T00:00:00Z"
          description: The date and time when the post was created.
        caption:
          type: string
          example: "This is a sample caption for the post."
          description: A textual description or caption for the post.
          nullable: true
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
          description: A list of media items attached to the post.
    Media:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 5e91507e-5630-4efd-9fd4-799178870b11
          description: A unique identifier for the media item.
        postId:
          type: string
          format: uuid
          example: 5e91507e-5630-4efd-9fd4-799178870b10
          description: The ID of the post to which the media belongs.
        url:
          type: string
          example: "https://example.com/media/image.jpg"
          description: The URL of the media item.
        type:
          type: string
          example: "PHOTO"
          enum:
            - PHOTO
            - VIDEO
          description: The type of the media (e.g., photo, video).


paths:
  /api/v1/groups:
    post:
      tags:
        - Group Endpoints
      summary: Creates a group
      description: Creates a group, a specific circle of family members or friends that are connected within the app.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLengthh: 100
                  description: The name of the group.
                description:
                  type: string
                  maxLength: 500
                  description: A description of the group.
              required:
                - name
      responses:
        201:
          description: Successfully created a group
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the group.
                  description:
                    type: string
                    description: A description of the group.
                    nullable: true
                  id:
                    type: string
                    format: uuid
                    example: 5e91507e-5630-4efd-9fd4-799178870b10
                    description: A unique identifier for the group.
                  managerId:
                    type: string
                    format: uuid
                    example: 5e91507e-5630-4efd-9fd4-799178870b10
                    description: A unique identifier of the group manager.
                required:
                  - name
                  - id
                  - managerId
                  - description
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /healthcheck:
    get:
      tags:
        - Healthcheck
      summary: Healthcheck endpoint
      description: Pings the server to check the health of the current server
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - OK

  /api/v1/users:
    post:
      tags:
        - User Endpoints
      summary: Creates a user
      description: Creates a user from the specified body (with ID being the decoded ID from JWT).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: Display name of the user.
                username:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: The username of the user.
                mode:
                  type: string
                  enum: ["BASIC", "ADVANCED", null]
                  description: The mode for the user (e.g., "BASIC" or "ADVANCED").
                profilePhoto:
                  type: string
                  nullable: true
                  description: A URL to the user's profile photo.
              required:
                - name
                - username
              additionalProperties: true
      responses:
        201:
          description: Successfully created a User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Same JWT creates multiple users or username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/users/{id}:
    get:
      tags:
        - User Endpoints
      summary: Gets a user
      description: Gets the user by their UUID.
      parameters:
        - name: id
          in: path
          description: ID of the user to get
          required: true
          schema:
            type: string
            format: uuid
            example: 5e91507e-5630-4efd-9fd4-799178870b10
      responses:
        200:
          description: Successfully retrieved a User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/users/me:
    patch:
      tags:
        - User Endpoints
      summary: Updates a user
      description: Updates the user profile for the currently authenticated user (identified by the decoded ID from JWT).
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  description: Display name of the user.
                username:
                  type: string
                  minLength: 1
                  description: The username of the user.
                mode:
                  type: string
                  enum: ["BASIC", "ADVANCED", null]
                  description: The mode for the user (e.g., "BASIC" or "ADVANCED").
                profilePhoto:
                  type: string
                  nullable: true
                  description: A URL to the user's profile photo.
                notificationsEnabled:
                  type: boolean
                  description: True when user wants to receive notifications.
              additionalProperties: true
      responses:
        200:
          description: Successfully updated the user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - User Endpoints
      summary: Deletes a user
      description: Deletes the user account for the currently authenticated user (identified by the decoded ID from JWT).
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successfully delete user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully delete user"
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/users/devices:
    post:
      tags:
        - User Endpoints
      summary: Register user's device token
      description: Registers an Expo Device Token for the currently authenticated user to receive notifications.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expoToken:
                  type: string
                  description: The Expo Device Token of the user.
              required:
                - expoToken
      responses:
        200:
          description: Successfully registered the device token
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                description: Array of user's device tokens
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - User Endpoints
      summary: Remove user's device token
      description: Removes a registered Expo Device Token for the currently authenticated user to not receive notifications.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expoToken:
                  type: string
                  description: The Expo Device Token of the user.
              required:
                - expoToken
      responses:
        200:
          description: Successfully removed the device token
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                description: Array of user's remaining device tokens
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /api/v1/groups/{groupId}/posts:
    post:
      tags:
        - Post Endpoints
      summary: Creates a post
      description: Creates a post from the specified body.
      parameters:
        - name: id
          in: path
          description: ID of the group a post is made in
          required: true
          schema:
            type: string
            format: uuid
            example: 5e91507e-5630-4efd-9fd4-799178870b10
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                caption:
                  type: string
                  minLength: 1
                  maxLength: 500
                  description: Caption of the post.
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - VIDEO
                          - PHOTO
                        description: The type of media (either VIDEO or PHOTO).
                      url:
                        type: string
                        description: The URL of the media item.
                    required:
                      - type
                      - url
                  description: A list of media items, each with a type and URL.
              required:
                - media
              additionalProperties: true
      responses:
        201:
          description: Successfully created a post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden since user is not a member of a group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/groups/{groupId}/posts/{postId}:
    get:
      tags:
        - Post Endpoints
      summary: Gets a post
      description: Gets a post's details.
      parameters:
        - name: groupId
          in: path
          description: ID of the group a post is made in
          required: true
          schema:
            type: string
            format: uuid
            example: 5e91507e-5630-4efd-9fd4-799178870b10
        - name: postId
          in: path
          description: ID of the post
          required: true
          schema:
            type: string
            format: uuid
            example: 5e91507e-5630-4efd-9fd4-799178870b10
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successfully created a post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden since user is not a member of a group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Post Endpoints
      summary: Updates a post
      description: Updates a post from the specified body.
      parameters:
        - name: groupId
          in: path
          description: ID of the group a post is made in
          required: true
          schema:
            type: string
            format: uuid
            example: 5e91507e-5630-4efd-9fd4-799178870b10
        - name: postId
          in: path
          description: ID of the post
          required: true
          schema:
            type: string
            format: uuid
            example: 5e91507e-5630-4efd-9fd4-799178870b10
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                caption:
                  type: string
                  minLength: 1
                  maxLength: 500
                  description: Caption of the post.
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - VIDEO
                          - PHOTO
                        description: The type of media (either VIDEO or PHOTO).
                      url:
                        type: string
                        description: The URL of the media item.
                    required:
                      - type
                      - url
                  description: A list of media items, each with a type and URL.
              additionalProperties: true
      responses:
        200:
          description: Successfully updated a post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden since user is not a member of a group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete: 
      tags:
        - Post Endpoints
      summary: Deletes a post
      description: Deletes a post.
      parameters:
        - name: groupId
          in: path
          description: ID of the group a post is made in
          required: true
          schema:
            type: string
            format: uuid
            example: 5e91507e-5630-4efd-9fd4-799178870b10
        - name: postId
          in: path
          description: ID of the post
          required: true
          schema:
            type: string
            format: uuid
            example: 5e91507e-5630-4efd-9fd4-799178870b10
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successfully delete post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully delete post"
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/ValidationError"
        401:
          description: Unauthorized due to invalid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden since user is not creator of post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


